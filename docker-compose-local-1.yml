
version: '3.8'

services:

  sigdep3:
    image: partnersinhealth/openmrs-server:latest
    restart: unless-stopped
    depends_on:
      sigdep-db:
        condition: service_healthy
    container_name: sigdep3
    hostname: sigdep3
    healthcheck:
      test:
        - CMD
        - curl
        - "-f"
        - "http://localhost:8080/openmrs/"
      timeout: 5s    
    environment:
      OMRS_CONFIG_CONNECTION_SERVER: "sigdep-db"
      OMRS_CONFIG_CONNECTION_ROOT_PASSWORD: "root"
      OMRS_CONFIG_CONNECTION_USERNAME: "root"
      OMRS_CONFIG_CONNECTION_PASSWORD: "root"
      OMRS_CONFIG_CONNECTION_EXTRA_ARGS: "&autoReconnect=true&sessionVariables=default_storage_engine%3DInnoDB&useUnicode=true&characterEncoding=UTF-8&useSSL=false&requireSSL=false"
      OMRS_CONFIG_AUTO_UPDATE_DATABASE: "false"
      OMRS_CONFIG_CREATE_TABLES: "false"
      OMRS_CONFIG_HAS_CURRENT_OPENMRS_DATABASE: "true"
      OMRS_DEV_DEBUG_PORT: "1044"
      CLIENTREGISTRY_SERVERURL: ${CLIENTREGISTRY_SERVERURL}
      CLIENTREGISTRY_USERNAME: ${CLIENTREGISTRY_USERNAME}
      CLIENTREGISTRY_PASSWORD: ${CLIENTREGISTRY_PASSWORD}
      CLIENTREGISTRY_IDENTIFIERROOT: ${CLIENTREGISTRY_IDENTIFIERROOT}
    ports:
      - "8080:8080"
      - "1044:1044"
    volumes:
      - ./configs/sigdep3/distribution:/openmrs/distribution
      # uncomment to persist the volumes on the Host file system
      #- .data/sigdep3:/openmrs/data
    networks:
      - hie
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=sigdep3_hie'
      - 'traefik.http.services.sigdep3.loadbalancer.server.port=8080'
      - 'traefik.http.services.sigdep3.loadbalancer.server.scheme=http'
      - 'traefik.http.routers.sigdep3.service=sigdep3'
      - 'traefik.http.routers.sigdep3.tls=true'
      - 'traefik.http.routers.sigdep3.entrypoints=web-secure'
      - 'traefik.http.routers.sigdep3.rule=Host(`test2.cihis.org`) && PathPrefix(`/openmrs`)'

  sigdep-db:
    image: library/mysql:5.6
    restart: unless-stopped    
    hostname: sigdep-db
    container_name: sigdep-db
    command: "mysqld \
              --character-set-server=utf8 \
              --collation-server=utf8_general_ci \
              --max_allowed_packet=1G \
              --default-authentication-plugin=mysql_native_password \
              --sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION"
    environment:
      MYSQL_DATABASE: "openmrs"
      MYSQL_ROOT_PASSWORD: "root"
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 20s
      retries: 10
    depends_on:
      openhim-core:
        condition: service_healthy    
    ports:
      - "3307:3306"          
    volumes:
      - ./configs/sigdep3/mysql.cnf:/etc/mysql/conf.d/custom.cnf  # mysql config preconfigured to allow binlog/debezium
      - ./configs/sigdep3/init-db:/docker-entrypoint-initdb.d
      # uncomment to persist the volumes on the Host file system
      #- .db/sigdep3:/var/lib/mysql
    networks:
      - hie

#OpenHIM -IOL
  mongo:
    container_name: openhim-mongo
    ports:
      - "27018:27017"
    image: mongo:3.4
    networks:
      - hie
      
  openhim-core:
    container_name: openhim-core
    image: jembi/openhim-core:v7.1.0
    restart: unless-stopped
    environment:
      - mongo_url=mongodb://mongo/openhim
      - mongo_atnaUrl=mongodb://mongo/openhim
    healthcheck:
      test: "node /healthcheck.js"
      interval: 20s
      timeout: 20s
      retries: 2
    volumes:
      - ./configs/openhim/healthcheck.js:/healthcheck.js
    depends_on:
      - mongo
    ports:
      - "8085:8080"
      - "5000:5000"
      - "5001:5001"
      - "5050:5050"
      - "5051:5051"
      - "5052:5052"
      - "7788:7788"       
    networks:
      - hie
    labels:
        - 'traefik.enable=true'
        - 'traefik.docker.network=sigdep3_hie'
        - 'traefik.http.services.openhim-api.loadbalancer.server.port=8080'
        - 'traefik.http.services.openhim-api.loadbalancer.server.scheme=https'
        - 'traefik.http.routers.openhim-api.service=openhim-api'
        - 'traefik.http.routers.openhim-api.tls=true'
        - 'traefik.http.routers.openhim-api.entrypoints=web-secure'
        - 'traefik.http.routers.openhim-api.rule=Host(`test2.cihis.org`) && PathPrefix(`/openhimcomms`)'
        - 'traefik.http.routers.openhim-api.middlewares=openhim-api'      
        - 'traefik.http.middlewares.openhim-api.stripprefix.prefixes=/openhimcomms'
        - 'traefik.http.middlewares.openhim-api.stripprefix.forceSlash=false'

        - 'traefik.http.services.openhim-ssl.loadbalancer.server.port=5000'
        - 'traefik.http.services.openhim-ssl.loadbalancer.server.scheme=https'
        - 'traefik.http.routers.openhim-ssl.service=openhim-ssl'
        - 'traefik.http.routers.openhim-ssl.tls=true'
        - 'traefik.http.routers.openhim-ssl.entrypoints=web-secure'
        - 'traefik.http.routers.openhim-ssl.rule=Host(`test2.cihis.org`) && PathPrefix(`/openhimcore`)'
        - 'traefik.http.routers.openhim-ssl.middlewares=openhim-ssl'      
        - 'traefik.http.middlewares.openhim-ssl.stripprefix.prefixes=/openhimcore'
        - 'traefik.http.middlewares.openhim-ssl.stripprefix.forceSlash=false'

  openhim-console:
    container_name: openhim-console
    image: jembi/openhim-console:v1.15.0
    volumes:
      - ./configs/openhim-console/default-local.json:/usr/share/nginx/html/config/default.json
    healthcheck:
      test: "curl -sS http://openhim-console || exit 1"
      interval: 10s
      timeout: 60s
      retries: 3
    ports:
        - "9000:80"         
    labels:
        - 'traefik.enable=true'
        - 'traefik.docker.network=sigdep3_hie'
        - 'traefik.http.services.openhim-console.loadbalancer.server.port=80'
        - 'traefik.http.services.openhim-console.loadbalancer.server.scheme=http'
        - 'traefik.http.routers.openhim-console.service=openhim-console'
        - 'traefik.http.routers.openhim-console.tls=true'
        - 'traefik.http.routers.openhim-console.entrypoints=web-secure'
        - 'traefik.http.routers.openhim-console.rule=Host(`test2.cihis.org`)'
    networks:
      - hie

  # Loads Default OpenHIM Config
  openhim-config:
    container_name: openhim-config
    image: ghcr.io/digi-uw/openhim-config:v0.0.0
    volumes:
      - ./configs/openhim/test-openhim-config.json:/app/test-openhim-config.json
    networks:
      - hie

###
  # OpenCR - Client Registry
  ###
  opencr:
    container_name: opencr
    hostname: opencr
    image: intrahealth/opencr:latest
    restart: unless-stopped
    environment:
      - NODE_ENV=docker
      - HAPI_FHIR_URL=http://opencr-fhir:8080/fhir/metadata
    volumes:
      - ./configs/opencr/config.json:/src/server/config/config_docker.json
      - ./configs/opencr/mediator.json:/src/server/config/mediator.json
      - ./configs/opencr/decisionRules.json:/src/server/config/decisionRules.json
      - ./configs/opencr/PatientRelationship.json:/src/resources/Relationships/PatientRelationship.json
    depends_on:
      - opencr-fhir
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=sigdep3_hie'
      - 'traefik.http.routers.opencr.tls=true'
      - 'traefik.http.routers.opencr.entrypoints=web-secure'
      - 'traefik.http.services.opencr.loadbalancer.server.port=3000'
      - 'traefik.http.routers.opencr.rule=Host(`test2.cihis.org`) && PathPrefix(`/crux`) || PathPrefix(`/ocrux`)' 
      - 'traefik.http.services.opencr.loadbalancer.server.scheme=http'
      - 'traefik.http.routers.opencr.service=opencr'
    networks:
      - hie
    ports:
      - 3000:3000         

  opencr-fhir:
    image: hapiproject/hapi:v5.5.1
    container_name: opencr-fhir
    hostname: opencr-fhir
    restart: unless-stopped
    healthcheck:
      test: "curl -sS http://opencr-fhir:8080/fhir/metadata || exit 1"
      interval: 90s
      timeout: 30s
      retries: 3
    volumes:
      - /data/hapi
    #   - ./configs/opencr/application.yml:/data/hapi/application.yaml
    ports:
      - 8081:8080
    # env_file:
    #   - ./configs/opencr/.env
    # environment:
    #   SPRING_CONFIG_LOCATION: 'file:///data/hapi/application.yaml'
    networks:
      - hie
  es:
    container_name: es
    hostname: es
    image: intrahealth/elasticsearch:latest
    restart: unless-stopped
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - /usr/share/elasticsearch/data
      - ./esplugin/string-similarity:/usr/share/elasticsearch/plugins/string-similarity-scoring
    healthcheck:
      test: "curl --silent --fail http://es:9200/_cluster/health || exit 1"
    networks:
      - hie

    # Hapi-FHIR -  SHR
  shr-hapi-fhir:
    container_name: shr-hapi-fhir
    image: hapiproject/hapi:v5.5.1
    restart: always
    environment:
      - spring.datasource.url=jdbc:postgresql://db/hapi?targetServerType=primary
      - spring.datasource.username=admin
      - spring.datasource.password=admin
      - spring.datasource.driverClassName=org.postgresql.Driver
      - spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL95Dialect
      - spring.datasource.hikari.minimumIdle=20
      - spring.datasource.hikari.connectionTimeout=60000
      - spring.datasource.hikari.idleTimeout=600000
      - hapi.fhir.allow_external_references=true
      - hapi.fhir.bulk_export_enabled=true
      - hapi.fhir.enable_repository_validating_interceptor=true
      - hapi.fhir.auto_create_placeholder_reference_targets=true
    depends_on:
      - db
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=sigdep3_hie'
      - 'traefik.http.routers.shr-hapi-fhir.tls=true'
      - 'traefik.http.routers.shr-hapi-fhir.entrypoints=web-secure'
      - 'traefik.http.services.shr-hapi-fhir.loadbalancer.server.port=8080'
      - 'traefik.http.routers.shr-hapi-fhir.rule=Host(`test2.cihis.org`) && PathPrefix(`/fhir`)'
      - 'traefik.http.services.shr-hapi-fhir.loadbalancer.server.scheme=http'
      - 'traefik.http.routers.shr-hapi-fhir.service=shr-hapi-fhir'
    networks:
      - hie
    ports:
      - 8888:8080

  # Streaming Pipeline
  streaming-pipeline: 
    image: openmrsinfra/openmrs-fhir-analytics:plir-binlog
    container_name: streaming-pipeline
    healthcheck:
      test: "exit 0"
    depends_on:
        sigdep3:
          condition: service_healthy
    volumes:
      - ./configs/streaming-pipeline/config.json:/deployments/config.json
      # data is the directory which you want to persist the generated parquet files
      # - ./configs/streaming-pipeline/parquet:/tmp
    environment:
      - OPENMRS_URL=http://sigdep3:8080/openmrs
      - OPENMRS_USERNAME=admin
      - OPENMRS_PASSWORD=Admin123
      - SINK_URL=http://openhim-core:5001/fhir/
      - SINK_USERNAME=dbezium
      - SINK_PASSWORD=dbezium
      - JDBC_FETCH_SIZE=10000
      - JDBC_MAX_POOL_SIZE=50
      - JDBC_INITIAL_POOL_SIZE=10
      - JDBC_DRIVER_CLASS=com.mysql.cj.jdbc.Driver
      - JDBC_URL=jdbc:mysql://sigdep-db:3306/openmrs
      # the 2 variable below should be same as volume mappings above
      #- PARQUET_PATH=
      - FHIR_DEBEZIUM_CONFIG_PATH=/deployments/config.json  
    networks:
        - hie
  #DB for HAPI FHIR for SHR
  db:
    image: postgres:9.5
    restart: always
    environment:
      POSTGRES_PASSWORD: admin
      POSTGRES_USER: admin
      POSTGRES_DB: hapi
    volumes:
      - /var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d  # Other dbs like opencr created via script
    ports:
      - "5432:5432"
    networks:
          - hie
secrets:
  datasource.password:
    file: ./configs/openelis/properties/datasource.password
  common.properties:
    file: ./configs/openelis/properties/common.properties

volumes:
  db-data:
  key_trust-store-volume:
  certs-vol:
  certs:
  keys-vol:       

networks:
  hie: