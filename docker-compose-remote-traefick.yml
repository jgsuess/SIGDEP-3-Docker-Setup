version: '3.8'


services:

  ###
  # Traefik Reverse Proxy
  ###
  traefik:
    image: traefik:v2.8.3
    restart: unless-stopped
    container_name: traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./configs/traefik/traefik.yml:/etc/traefik/traefik.yml
      - ./configs/traefik/certs.yml:/etc/traefik/dynamic_conf/certs.yml
      - certs:/etc/certs

    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=sigdep3_hie'
      - 'traefik.http.routers.api.rule=Host(`test2.cihis.org`) && PathPrefix(`/api`) || PathPrefix(`/dashboard`)'
      - 'traefik.http.routers.api.service=api@internal'
      - 'traefik.http.routers.api.tls=true'
      - 'traefik.http.routers.api.entrypoints=web-secure'
    networks:
      - hie
    ports:
      - 80:80
      - 443:443
      - 8282:8080

  #OpenHIM -IOL
  mongo:
    container_name: openhim-mongo
    ports:
      - "27017:27017"
    image: mongo:3.4
    networks:
      - hie
      
  openhim-core:
    container_name: openhim-core
    image: jembi/openhim-core:v7.1.0
    restart: unless-stopped
    environment:
      - mongo_url=mongodb://mongo/openhim
      - mongo_atnaUrl=mongodb://mongo/openhim
    healthcheck:
      test: "node /healthcheck.js"
      interval: 20s
      timeout: 20s
      retries: 2
    volumes:
      - ./configs/openhim/healthcheck.js:/healthcheck.js
    depends_on:
      - mongo
    networks:
      - hie
    labels:
        - 'traefik.enable=true'
        - 'traefik.docker.network=sigdep3_hie'
        - 'traefik.http.services.openhim-api.loadbalancer.server.port=8080'
        - 'traefik.http.services.openhim-api.loadbalancer.server.scheme=https'
        - 'traefik.http.routers.openhim-api.service=openhim-api'
        - 'traefik.http.routers.openhim-api.tls=true'
        - 'traefik.http.routers.openhim-api.entrypoints=web-secure'
        - 'traefik.http.routers.openhim-api.rule=Host(`test2.cihis.org`) && PathPrefix(`/openhimcomms`)'
        - 'traefik.http.routers.openhim-api.middlewares=openhim-api'      
        - 'traefik.http.middlewares.openhim-api.stripprefix.prefixes=/openhimcomms'
        - 'traefik.http.middlewares.openhim-api.stripprefix.forceSlash=false'

        - 'traefik.http.services.openhim-ssl.loadbalancer.server.port=5000'
        - 'traefik.http.services.openhim-ssl.loadbalancer.server.scheme=https'
        - 'traefik.http.routers.openhim-ssl.service=openhim-ssl'
        - 'traefik.http.routers.openhim-ssl.tls=true'
        - 'traefik.http.routers.openhim-ssl.entrypoints=web-secure'
        - 'traefik.http.routers.openhim-ssl.rule=Host(`test2.cihis.org`) && PathPrefix(`/openhimcore`)'
        - 'traefik.http.routers.openhim-ssl.middlewares=openhim-ssl'      
        - 'traefik.http.middlewares.openhim-ssl.stripprefix.prefixes=/openhimcore'
        - 'traefik.http.middlewares.openhim-ssl.stripprefix.forceSlash=false'

  openhim-console:
    container_name: openhim-console
    image: jembi/openhim-console:v1.15.0
    volumes:
      - ./configs/openhim-console/default.json:/usr/share/nginx/html/config/default.json
    healthcheck:
      test: "curl -sS http://openhim-console || exit 1"
      interval: 10s
      timeout: 60s
      retries: 3
    labels:
        - 'traefik.enable=true'
        - 'traefik.docker.network=sigdep3_hie'
        - 'traefik.http.services.openhim-console.loadbalancer.server.port=80'
        - 'traefik.http.services.openhim-console.loadbalancer.server.scheme=http'
        - 'traefik.http.routers.openhim-console.service=openhim-console'
        - 'traefik.http.routers.openhim-console.tls=true'
        - 'traefik.http.routers.openhim-console.entrypoints=web-secure'
        - 'traefik.http.routers.openhim-console.rule=Host(`test2.cihis.org`)'
    networks:
      - hie

  # Loads Default OpenHIM Config
  openhim-config:
    container_name: openhim-config
    image: ghcr.io/digi-uw/openhim-config:v0.0.0
    volumes:
      - ./configs/openhim/remote-test-openhim-config.json:/app/test-openhim-config.json
    networks:
      - hie

  # OpenCR - Client Registry
  ###
  opencr:
    container_name: opencr
    hostname: opencr
    image: intrahealth/opencr:latest
    restart: unless-stopped
    environment:
      - NODE_ENV=docker
      - HAPI_FHIR_URL=http://opencr-fhir:8080/fhir/metadata
    volumes:
      - ./configs/opencr/config.json:/src/server/config/config_docker.json
      - ./configs/opencr/mediator.json:/src/server/config/mediator.json
      - ./configs/opencr/decisionRules.json:/src/server/config/decisionRules.json
      - ./configs/opencr/PatientRelationship.json:/src/resources/Relationships/PatientRelationship.json
    depends_on:
      - opencr-fhir
      - openhim-core
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=sigdep3_hie'
      - 'traefik.http.routers.opencr.tls=true'
      - 'traefik.http.routers.opencr.entrypoints=web-secure'
      - 'traefik.http.services.opencr.loadbalancer.server.port=3000'
      - 'traefik.http.routers.opencr.rule=Host(`test2.cihis.org`) && PathPrefix(`/crux`) || PathPrefix(`/ocrux`)' 
      - 'traefik.http.services.opencr.loadbalancer.server.scheme=http'
      - 'traefik.http.routers.opencr.service=opencr'
    networks:
      - hie

  opencr-fhir:
    image: hapiproject/hapi:v5.5.1
    container_name: opencr-fhir
    hostname: opencr-fhir
    restart: unless-stopped
    healthcheck:
      test: "curl -sS http://opencr-fhir:8080/fhir/metadata || exit 1"
      interval: 90s
      timeout: 30s
      retries: 3
    volumes:
      - /data/hapi
    #   - ./configs/opencr/application.yml:/data/hapi/application.yaml
    ports:
      - 8081:8080
    # env_file:
    #   - ./configs/opencr/.env
    # environment:
    #   SPRING_CONFIG_LOCATION: 'file:///data/hapi/application.yaml'
    networks:
      - hie
  
  es:
    container_name: es
    hostname: es
    image: intrahealth/elasticsearch:latest
    restart: unless-stopped
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - /usr/share/elasticsearch/data
      - ./esplugin/string-similarity:/usr/share/elasticsearch/plugins/string-similarity-scoring
    healthcheck:
      test: "curl --silent --fail http://es:9200/_cluster/health || exit 1"
    networks:
      - hie

  # Hapi-FHIR -  SHR
  shr-hapi-fhir:
    container_name: shr-hapi-fhir
    image: hapiproject/hapi:v5.5.1
    restart: always
    environment:
      - spring.datasource.url=jdbc:postgresql://db/hapi?targetServerType=primary
      - spring.datasource.username=admin
      - spring.datasource.password=admin
      - spring.datasource.driverClassName=org.postgresql.Driver
      - spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL95Dialect
      - spring.datasource.hikari.minimumIdle=20
      - spring.datasource.hikari.connectionTimeout=60000
      - spring.datasource.hikari.idleTimeout=600000
      - hapi.fhir.allow_external_references=true
      - hapi.fhir.bulk_export_enabled=true
      - hapi.fhir.enable_repository_validating_interceptor=true
      - hapi.fhir.auto_create_placeholder_reference_targets=true
    depends_on:
      - db
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=sigdep3_hie'
      - 'traefik.http.routers.shr-hapi-fhir.tls=true'
      - 'traefik.http.routers.shr-hapi-fhir.entrypoints=web-secure'
      - 'traefik.http.services.shr-hapi-fhir.loadbalancer.server.port=8080'
      - 'traefik.http.routers.shr-hapi-fhir.rule=Host(`test2.cihis.org`) && PathPrefix(`/fhir`)'
      - 'traefik.http.services.shr-hapi-fhir.loadbalancer.server.scheme=http'
      - 'traefik.http.routers.shr-hapi-fhir.service=shr-hapi-fhir'
    networks:
      - hie

  #DB for HAPI FHIR for SHR
  db:
    image: postgres:9.5
    restart: always
    environment:
      POSTGRES_PASSWORD: admin
      POSTGRES_USER: admin
      POSTGRES_DB: hapi
    volumes:
      - /var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d  # Other dbs like opencr created via script
    ports:
      - "5432:5432"
    networks:
          - hie

  pipeline-controller:
    image: itechuw/fhir-data-pipes:develop
    container_name: pipeline-controller
    volumes:
      - ./configs/remote-streaming-pipeline:/app/config:ro
      - ./configs/dwh:/dwh
    environment:
      - "JAVA_OPTS=$JAVA_OPTS"
    ports:
      - '8090:8080'
    networks:
      - hie

  spark:
    image: docker.io/bitnami/spark:3.3
    container_name: spark-thriftserver
    command:
      - sbin/start-thriftserver.sh
      - --driver-memory
      # You may need to increase this if your queries/data are too large.
      - 4g
    environment:
      - HIVE_SERVER2_THRIFT_PORT=10000
      - "JAVA_OPTS=-Xms1024m -Xmx5024m"
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 4G
    ports:
      - '10001:10000'
      - '4041:4040'
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=sigdep3_hie'
      - 'traefik.http.routers.spark.tls=true'
      - 'traefik.http.routers.spark.entrypoints=web-secure'
      - 'traefik.http.services.spark.loadbalancer.server.port=4040'
      - 'traefik.http.routers.spark.rule=Host(`tap-demo.openelisci.org`) && PathPrefix(`/spark`)' 
      - 'traefik.http.services.spark.loadbalancer.server.scheme=http'
      - 'traefik.http.routers.spark.service=spark'
    volumes:
      - ./configs/dwh:/dwh
      # NON-EMBEDDED METASTORE CONFIG:
      # If you want to persist the Metastore data, e.g., table and view
      # definitions, you can use an external database by adjusting hive-site.xml
      #- ./hive-site_example.xml:/opt/bitnami/spark/conf/hive-site.xml
      # Note to use an external DB, you need to provide its driver jar too:
      #- ./postgresql-42.6.0.jar:/opt/bitnami/spark/jars/postgresql-42.6.0.jar
      - spark_vol_single:/opt/bitnami/spark
    networks:
      - hie
    healthcheck:
      test: beeline help || exit 1
      interval: 10s
      retries: 10
      start_period: 5s
      timeout: 60s


secrets:
  datasource.password:
    file: ./configs/openelis/properties/datasource.password
  common.properties:
    file: ./configs/openelis/properties/common.properties

volumes:
  db-data:
  key_trust-store-volume:
  certs-vol:
  certs:
  keys-vol:
  spark_vol_single:

networks:
  hie: